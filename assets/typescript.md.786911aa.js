import{o as n,g as s,V as a}from"./vendor.e7d24465.js";const t='{"title":"TypeScript","description":"","frontmatter":{"title":"TypeScript","sidebar":"auto"},"headers":[{"level":2,"title":"使用类型","slug":"使用类型"},{"level":3,"title":"基本类型","slug":"基本类型"},{"level":3,"title":"任意值","slug":"任意值"},{"level":3,"title":"函数与数组类型","slug":"函数与数组类型"},{"level":3,"title":"interface 与 type","slug":"interface-与-type"},{"level":3,"title":"联合类型","slug":"联合类型"},{"level":3,"title":"类型推导","slug":"类型推导"},{"level":3,"title":"泛型","slug":"泛型"},{"level":3,"title":"类型断言","slug":"类型断言"},{"level":3,"title":"内置对象","slug":"内置对象"},{"level":3,"title":"工具类型","slug":"工具类型"},{"level":2,"title":"书写风格","slug":"书写风格"},{"level":3,"title":"代码命名规范","slug":"代码命名规范"},{"level":3,"title":"变量的导出","slug":"变量的导出"},{"level":3,"title":"注释","slug":"注释"},{"level":3,"title":"泛型的使用场景","slug":"泛型的使用场景"},{"level":3,"title":"TypeScript 的类型运算","slug":"typescript-的类型运算"},{"level":2,"title":"Composables & TypeScript","slug":"composables-typescript"},{"level":3,"title":"在 Vue2 中使用 Composables","slug":"在-vue2-中使用-composables"},{"level":3,"title":"在 Vue3 中使用 Composables","slug":"在-vue3-中使用-composables"},{"level":2,"title":"来挑战一下","slug":"来挑战一下"},{"level":3,"title":"热身","slug":"热身"},{"level":3,"title":"简单","slug":"简单"}],"relativePath":"typescript.md","lastUpdated":1630654700817}',p={},o=[a('<h1 id="编写高质量的-typescript-业务代码"><a class="header-anchor" href="#编写高质量的-typescript-业务代码" aria-hidden="true">#</a> 编写高质量的 TypeScript 业务代码</h1><blockquote><p>前置阅读<br><a href="https://ts.xcatliu.com/introduction/what-is-typescript.html" target="_blank" rel="noopener noreferrer">TypeScript 入门教程</a><br><a href="https://jkchao.github.io/typescript-book-chinese/" target="_blank" rel="noopener noreferrer">深入理解 TypeScript</a><br><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noopener noreferrer">HandBook</a></p></blockquote><h2 id="使用类型"><a class="header-anchor" href="#使用类型" aria-hidden="true">#</a> 使用类型</h2><p>正如其名，Type + Script 是 TypeScript(以下以 TS 简称) 的魅力之所在。TS 的类型丰富多样，但是我们开发的过程中使用的大部分类型如下所示：</p><ul><li>基本类型，如 <code>string</code>、<code>number</code>、<code>boolean</code>、<code>undefined</code>、<code>null</code>、<code>void</code>、<code>symbol</code></li><li>引用类型，如 <code>object</code>、<code>Array&lt;T&gt;</code> / <code>&lt;T&gt;[]</code>，`` 等</li><li>函数类型，如 <code>() =&gt; void</code> 等</li><li>内置对象类型，如 <code>Promise&lt;T&gt;</code> 等</li><li>Utility Types，如 <code>ReturnType&lt;T&gt;</code>，<code>Omit&lt;T&gt;</code>，<code>Partial&lt;T&gt;</code>，<code>Record&lt;Keys,Type&gt;</code> 等</li><li>其他类型，如：<code>never</code>，<code>unknown</code>，<code>any</code> 等</li></ul><p>下面做使用介绍。</p><h3 id="基本类型"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h3><p>使用起来也非常简单：</p><div class="language-ts"><pre><code><span class="token comment">// 定义一个数字类型的变量</span>\n<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span>\n\na <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// good</span>\na <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// error，编译不通过；string 类型不能赋值给数字类型</span>\n\n<span class="token comment">// 定义个布尔类型的变量</span>\n<span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// error，编译不通过；string 类型不能赋值给布尔类型</span>\n<span class="token keyword">let</span> c<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// ok</span>\n\n<span class="token comment">// 定义一个字符串类型的变量</span>\n<span class="token keyword">let</span> d<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;xyz&#39;</span>\n\n<span class="token comment">// 空值 void，常用来表示一个函数没有返回值</span>\n<span class="token keyword">function</span> <span class="token function">consoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;My name is Tom&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Null 与 undefined；与 void 的区别是，undefined 和 null 是所有类型的子类型。</span>\n<span class="token comment">// 也就是说 undefined 类型的变量，可以赋值给 number 类型的变量</span>\n<span class="token comment">// 这样不会报错</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n</code></pre></div><h3 id="任意值"><a class="header-anchor" href="#任意值" aria-hidden="true">#</a> 任意值</h3><p>使用 <code>any</code> 表示任意类型，可以对 <code>any</code> 执行任意操作。</p><div class="language-ts"><pre><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">7</span>\na <span class="token operator">=</span> <span class="token string">&#39;12&#39;</span> <span class="token comment">// ok</span>\n<span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// ok</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>使用 <code>any</code> 会破坏整体的<a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">类型推导</a>；在 <code>any</code> 之上的任意操作，都会到一个 <code>any</code> 的返回值；非必要的情况下尽量不要使用 <code>any</code></p></div><div class="tip custom-block"><p class="custom-block-title">技巧</p><p>在使用<a href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80">类型断言</a>时，若把已知类型的断言成为非兼容类型，可以使用 <code>someThing as any as SomeType</code></p></div><h3 id="函数与数组类型"><a class="header-anchor" href="#函数与数组类型" aria-hidden="true">#</a> 函数与数组类型</h3><p>函数声明</p><div class="language-ts"><pre><code><span class="token comment">// 函数声明，有变量提升</span>\n<span class="token keyword">function</span> <span class="token function">assignString</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数表达式声明</span>\n<span class="token keyword">let</span> <span class="token function-variable function">consoleAny</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 使用接口定义函数</span>\n<span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc\n\n<span class="token comment">// 使用接口定义构造函数/Class</span>\n<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Point\n  x<span class="token operator">:</span> <span class="token builtin">number</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 可以选与剩余参数定义</span>\n<span class="token keyword">let</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> rest<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>剩余参数只能写在参数的最后</p></div><p>函数重载</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">proxyUrl</span><span class="token punctuation">(</span>\n  origin<span class="token operator">:</span> <span class="token builtin">string</span>\n  target<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">proxyUrl</span><span class="token punctuation">(</span>urlMap<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">proxyUrl</span><span class="token punctuation">(</span>\n  origin<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  target<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">.</span>prototype <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_open <span class="token operator">=</span>\n    XMLHttpRequest<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>open\n  XMLHttpRequest<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>\n    method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    async<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 用对象便于修改参数</span>\n    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n      method<span class="token operator">:</span> method<span class="token punctuation">,</span>\n      url<span class="token operator">:</span> url<span class="token punctuation">,</span>\n      async<span class="token operator">:</span> async<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> origin <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        options<span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span> options<span class="token punctuation">.</span>async<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      origin<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          options<span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span> options<span class="token punctuation">.</span>async<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="interface-与-type"><a class="header-anchor" href="#interface-与-type" aria-hidden="true">#</a> interface 与 type</h3><p>在 TS 中，定义对象的接口使用 interface</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">IPoint</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span>\n  z<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p1<span class="token operator">:</span> IPoint <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>声明一个新的类型使用 type</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">讨论</p><p>\b一般情况，类型声明能用 interface 实现，就不用 type 实现；同时二者还有很多高级特性，具体<a href="https://github.com/SunshowerC/blog/issues/7#%E9%83%BD%E5%85%81%E8%AE%B8%E6%8B%93%E5%B1%95extends" target="_blank" rel="noopener noreferrer">参考</a></p></div><h3 id="联合类型"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h3><p>用中竖线 <code>|</code> 来表示，变量可能是其中的某一个类型</p><div class="language-ts"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">思考</p><p>其实 boolean 可以理解为联合类型，type yourBoolean = false | true；number 就是无穷数的联合</p></div><h3 id="类型推导"><a class="header-anchor" href="#类型推导" aria-hidden="true">#</a> 类型推导</h3><p>TS 很聪明，如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 相当于</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token keyword">const</span> a<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>也不是那么聪明，推导不出就是 <code>any</code></p></div><h3 id="泛型"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>简单理解，就是定义时候不写死类型，使用的时候再定义类型</p><div class="language-ts"><pre><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">T</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x\n\n<span class="token comment">// 使用</span>\n\n<span class="token generic-function"><span class="token function">a</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="类型断言"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><p>断言有两种语法，只推荐使用 <code>as</code>；<strong>一般用来把 <code>any</code> 断言为具体类型</strong>。<s>实际在使用中往往被开发者用在把具体类型断言为 <code>any</code>，啊这</s></p><div class="language-ts"><pre><code><span class="token keyword">let</span> zeus<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span>zeuss <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>另一种写法 &lt;类型&gt;值；非必要尽量别断言</p></div><h3 id="内置对象"><a class="header-anchor" href="#内置对象" aria-hidden="true">#</a> 内置对象</h3><p>内置对象有以下几种类型</p><ul><li>基本类型的构造函数，如 <code>Boolean</code></li><li>Javscript 的内置对象， 如 <code>Date</code>, <code>Promise</code>，<code>RegExp</code></li><li><code>Bom</code>，<code>Dom</code>，如 <code>HTMLElement</code>，<code>UIEvent</code>，<code>EventTarget</code> 等</li></ul><h3 id="工具类型"><a class="header-anchor" href="#工具类型" aria-hidden="true">#</a> 工具类型</h3><p>TS 提供一些常用的工具类型，以下列举几个常用的，具体参考<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noopener noreferrer">HandBook</a></p><ul><li><code>Omit&lt;Type, Keys&gt;</code>，即移除类型的一些 <code>key</code></li><li><code>ReturnType&lt;Type&gt;</code>，获取函数的返回值类型</li><li><code>InstanceType&lt;Type&gt;</code>，获取类的实例类型</li></ul><div class="tip custom-block"><p class="custom-block-title">了解更多</p><p>以上就是我们在开发业务中常用的一些类型，想了解更多吗？<br> 来看看<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html" target="_blank" rel="noopener noreferrer">Everyday Type</a></p></div><h2 id="书写风格"><a class="header-anchor" href="#书写风格" aria-hidden="true">#</a> 书写风格</h2><h3 id="代码命名规范"><a class="header-anchor" href="#代码命名规范" aria-hidden="true">#</a> 代码命名规范</h3><ul><li>通常我们在定义 <code>interface</code> 时，以 <code>I</code>作为开头</li><li>定义泛型参数时使用单个大写字母</li><li>使用 <code>PascalCase</code> 为类型命名</li><li>不要为私有属性名添加 <code>_</code> 前缀</li><li>不要为变量、函数添加 <code>$</code> 前缀</li><li>尽可能使用完整的单词拼写命名</li><li>使用 <code>camelCase</code> 为函数命名</li><li>使用全大写加下划线为常量命名</li><li>使用小写字母加下划线为静态文件命名</li></ul><h3 id="变量的导出"><a class="header-anchor" href="#变量的导出" aria-hidden="true">#</a> 变量的导出</h3><ul><li>除非你想要共享一下工具方法或者变量，否则不要 <code>export</code></li><li><code>export default</code> 被认为是有害的</li><li>假如是个纯 <code>TypeScripy</code> 项目，没有必要使用 <code>d.ts</code> 来做类型的导出，因为 <code>d.ts</code> 是给 <code>JavaScript</code> 来识别的</li><li>一个文件中类型的定义应该出现在文件的顶部，<code>import</code> 语句的后</li></ul><h3 id="注释"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><p>为函数，接口，枚举类型和类使用JSDoc风格的注释</p><h3 id="泛型的使用场景"><a class="header-anchor" href="#泛型的使用场景" aria-hidden="true">#</a> 泛型的使用场景</h3><p>泛型在业务开发中，最常用的用的地方就是定义函数类型，根据接收的参数来推导出返回值的类型</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 利用类型推导，TS 可以轻易推导出 output 的类型是个 string</span>\n<span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&quot;myString&quot;</span><span class="token punctuation">)</span>\n</code></pre></div><p>默认的泛型值，我们可以在定义泛型的时候给一个默认值</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">=</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>泛型约束，可以使用 <code>extends</code> 关键字来约束泛型</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>\n  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Now we know it has a .length property, so no more error</span>\n  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="typescript-的类型运算"><a class="header-anchor" href="#typescript-的类型运算" aria-hidden="true">#</a> TypeScript 的类型运算</h3><ul><li><code>typeof</code></li><li><code>keyof</code> &amp; <code>in</code></li><li><code>extends</code></li><li><code>infer</code></li><li>字符模板类型</li></ul><h2 id="composables-typescript"><a class="header-anchor" href="#composables-typescript" aria-hidden="true">#</a> Composables &amp; TypeScript</h2><h3 id="在-vue2-中使用-composables"><a class="header-anchor" href="#在-vue2-中使用-composables" aria-hidden="true">#</a> 在 Vue2 中使用 Composables</h3><p>安装 <code>@vue/composition-api</code></p><div class="language-bash"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> @vue/composition-api\n</code></pre></div><p>使用</p><div class="language-ts"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> VueCompositionAPI <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueCompositionAPI<span class="token punctuation">)</span>\n</code></pre></div><p>使用响应式 <strong>API</strong></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  ref<span class="token punctuation">,</span>\n  computed<span class="token punctuation">,</span>\n  defineComponent<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// count 的类型能被正确推导</span>\n    <span class="token keyword">const</span> doubleCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// doubleCount 也能被正确推导</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> count<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> increase <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>使用 <code>watch</code></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  watch<span class="token punctuation">,</span>\n  watchEffect<span class="token punctuation">,</span>\n  defineComponent\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// count 的类型能被正确推导</span>\n\n    <span class="token comment">// watch 可以观察一个 ref，然后在其发生变化时，执行回调；默认情况 watch 是 lazy 的；可以观察多个对象</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// watchEffect 在立即执行的</span>\n    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 两种的监听函数的返回值为 stopWatch；调用即可停止观察</span>\n    \n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>使用声命周期</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  onMounted\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// count 的类型能被正确推导</span>\n\n    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;挂载&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    \n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>使用 <code>template ref</code></p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  onMounted\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// count 的类型能被正确推导</span>\n    <span class="token keyword">const</span> root <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLElement<span class="token operator">|</span><span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// ref，computed 可以接受泛型参数来约束类型</span>\n\n    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    \n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> root <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>使用 <code>getCurrentInstance</code></p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  onMounted<span class="token punctuation">,</span>\n  getCurrentInstance<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// count 的类型能被正确推导</span>\n    <span class="token keyword">const</span> root <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLElement<span class="token operator">|</span><span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// ref，computed 可以接受泛型参数来约束类型</span>\n\n    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>proxy<span class="token punctuation">)</span> <span class="token comment">// .proxy 好比之前的 this</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    \n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> root <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>其他注意事项参考<a href="https://github.com/vuejs/composition-api/blob/master/README.zh-CN.md" target="_blank" rel="noopener noreferrer">@vue/composition-api</a>、<a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html" target="_blank" rel="noopener noreferrer">组合式API</a></p><h3 id="在-vue3-中使用-composables"><a class="header-anchor" href="#在-vue3-中使用-composables" aria-hidden="true">#</a> 在 Vue3 中使用 Composables</h3><h2 id="来挑战一下"><a class="header-anchor" href="#来挑战一下" aria-hidden="true">#</a> <a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noopener noreferrer">来挑战一下</a></h2><h3 id="热身"><a class="header-anchor" href="#热身" aria-hidden="true">#</a> 热身</h3><p><a href="https://www.typescriptlang.org/play?#code/PQKgUABBCMDMEFoIAkCmAbdB7CB1LATugCaSIIWVkBGAnhAIIB2ALgBZZP0BiArhAAoAAgENWAM14BKCAGJAtw6BquIhkys9REAZGYDu3VVDSYsAGjyESAQj0RAm-GAqOUAB3oFVlQCFugBeNAd6mAYPUDY5oErowAbygPfKgKdygNf6gPgJgFBygNJGEAAqtAAOqBAAwmwimKhMAOaoAM6AQAyAFOrWgDOJgDD-gIhGgDdygP7ygBSugGFygABygNlygHqegOKazoABRoDnur7xSagAygDGBACWiSwQgFgJgOPxgFeBis6A3j6A0eqA3z6A+36ApuaAedqADc7LgBVKgCRKmoUqUGSltoCIxoAYRoC0chX+gADpgIGRgHfygJymgGg5QCdps5AMdygEAPOqAdP1ANK2gFXopaACH+6oA3RUAhTaASHMtoBMVMA99GASH-ClYAAZklj5MjAYAQQD45t5APRmLVsEHyLGmuQgWzILBGKAw2HwRGIEAAvBAxLQyGSSaTyZSoNSIF9vjDAEGagOsgBkIwCwcoAseUA2UaAL8VAED6gA49Hl8lgFObigCiAA9kuMWAAeO0AR14mVdBkFZmIJjZHJyAD5Q9KyVZAJ0OgG-FSKgiAkwClxoB15ReJIggAB9QDTmoA0fwhgEB-wCjpoAUBMAkIahQtWUMQYoQADiU3YvGoEEigFPzQDQ7oAsf7YLBYiXyAC5qRTxmwAHQAK3yk8IOWAcGAAC82AhUgA5MAgYBgfegCAAfRPp7Pp+V4Ihx-Pt6PEF3+95yX5hiFJDFEq4ECVqCdqBdVARRYHBqBSERWXZKZcn3MBDzvW8IARBpAGj5G8EIvR8pgAW0SQg5gAbwgT1vXQExHWdFgTE3LAWGYegAF8IHEAgsGwiAAHIhGfVAEAnTJ0GyPJ8mAXgWCmdB8g4p8+XGER8gKT8AG0yAogC3RouiuF9AUsHfYhwyMVT-xdd0vR9P09IDIMoNycMwAAXVguCQHQjD70BFpAFNrNyMIfPdQDIWtADAlQBquX8ZxAGPIwAVbz7Ach1HYBxynWd5wIRdlzEfIAHdUAIVd1y3IKIG7GK4sHEcx3yCcZznBcl1gYB8iwdAxKmTgFQgWtABezQAsTR0cqEqqmrUvqtcN23R8wCAA" target="_blank" rel="noopener noreferrer">Hello World</a></p><h3 id="简单"><a class="header-anchor" href="#简单" aria-hidden="true">#</a> 简单</h3><p><a href="https://www.typescriptlang.org/play?#code/PQKgUABBAsELQUHnagG5wgBQJYGMDWl5yFH4BGAnhAIIB2ALgBYD21FAYgK4QAUAAgIZ0AZuwCUEAMSAA70CqyhPbUMzCSXYYANrTgZq+fOP0RAGRmA7t11QAfBECMroHYYwDLWgK8DAFUqBv-0CL0YBh-wETWgOfj0AJQhATlNAbfj3QApYwHnEwCAGMwhAA9NAAHTAf3lACldAUMVAO39AELcAA0xcAB4AFQAaCABpc1zAbZtAaPVAZ2VAe+VYqHxALATAcfjAOblcitzAWjlASATAS6NAPR1AcgNc4tzAU3NAEPNAAgTAbx86uMBo+UAgzTjc3doAZ3xtWgBTACdBPiwTiGLGABNGCABvfChaDFo1E4AuCH3aGdtABzN4Qe4nfZYIEABw+zD+AKB1FBUCgWEYAFsYd9Tvc-iRGIxvgJ8ABfOK0Mgwm53R5oM4nABuGBOAHcIABeCAAWTIBRwJQejHKAHIPl8TqKIAAfCCijHY3Ene6i8xxDHUAEQWjCv50xgM5msjnc15otES75-UUAYRJ1AgZyJmNFpTB6KxOJOeL+lzU+xO7qgFKgu1ycUsgAp1CAAcU+9HYJAggCg5QCn5oBod0AWP-0Wi0GH7H7AYAHLD0AB0ACt9uXGGdgcBoMAAF70OC2gByYBAwDAfdAEAA+sOR6ORxBAAby2UAx3KAQA8h2PF4OID2+1Sabz+dhBWVKpZuQIyH2wAOl4uIIBpW0Aq9GpdYLs-j1cYbF12gvCAAUQAjuw+Gpyh+AAeNJYG+ZIQIIzqYvKPDriccBln+3wopCwDsB8Aaimu1I3FgfCBvsXIQAA2vgQEgbQhTfr+ahUcBJygSqACM5R8gKQqPGKVpSuYvHBp+9GgVRP5-nRFEqgATKxW5FAaXGfN80pygqXrKqqvHmPxxYQLB+xwCcgmaOczpnPgbHbhxIrytxSnyoq3p4rZoraEyf4YOp7oALp9sc5yXNctzCi8+DcYigIgvgEJQrC8LUGFyKohA9lqQSRIOmAFJgL5FxXDc5EMXiTHBe8Cm-P84UohlPl0H5uUCeJ9wScVOqlfFEWekqPoqqlxInKSmX9iA94PsugDQcoAAHKAKbWw0PiuvagPgliAGBKgDVclOgDHkYAKt45nmBZFiWUIVtWtb1o2wACPsbLnC2badotECZltO35oWxalkdNZ1g2Tb7MS6GKFq92AC9mgBYmiYz17W9h1Vp9p2tu2XarmAQA" target="_blank" rel="noopener noreferrer">实现 Pick</a></p><p><a href="https://www.typescriptlang.org/play?#code/PQKgUABBDsELQUHnagG5wgJQKYEMAmB7AOwBsBPSeOSq8gIxIgEECAXAC0PoDEBXCACgACWFgDNuASggBiQAHegVWVpNbgEsizOMoLSATtnzF6UvDQBWGAMbqA1hhIBncuSnOIgDIzAd26OoAPgiBGV0B2GMAZa0ArwMAKpUBv-0BF6MAYf8Aia0A5+IgABTQIQE5TQG346MAKWMB5xMAgBi8IQAPTQAB0wH95QApXQFDFQDt-QBC3AANMXEJSAB4AFW8mwG2bQGj1QGdlQHvlIqhyQBDzQAIEwAA5QCo5QG8fAZjANz1AMB0uhsABI0BIc0A9HUByA0A+6LrALjlAK+VAb+iYwE34wHhDQGcVQAF3EsBVm0BZxMAG00AwJUBZRO2M2WDSO4wg5EA0fKAIM1ik04cwHFBNMwMNoRFhzBgIF08PgIABvchQZjKZhEDAALggdmY2k0AHMiRAcBg7OY6QAHEmEKk0ukERlQAC+xXMhBpEGYuLwVIAsiRWvpOjj8L4ALwEpkksmUiAAIgAErY9QAaJkstmc7kEKl6kR4YxYbR68giibE6UAOm15IgGsNGCIRDweogwGAEAAotptHhtFTzMICHhmBBdFg7HZlPStFg03p2vQObGOajmGQPfhPRb2coucpCH79TQnZwHaHw1GY3GE0mU-mM1mcxA8+mlUWS2WKxA4U1ir5ABTqEAA4qTWNwaBBAFBygFPzQDQ7oAsf9YzGYHLsFPDCPMrE9Jjsnrj9OA0GAAC9WHAAMIAOTAIGAYCAaAEAAPpgeBEHgRAgAG8g0gDHcoAgB6gZBKEgRA-6AeWpYQPKiqFt06ojgQZBASAyGoRBECANK2gCr0VUELkRRYHoQBygALYcnGqb4lGACO3BYEQJpRgAHqWlgQEKEAiLGbEQAA5AIWEYHA16CeSAqssA3AkkQdjyZhJDYYmdisk2ADa5CRmJFjMB0kb8YJHS4QWBjdNKACM3jCXhbkqngXneN5YAALqAciqLopi2KeZqxKkuSvK0gy5A1laDY2tSyUCuQYoceSKI4FSNAOuSwhgCKgFgMBTGUYA0HKzIAptaMUxLHVeAPgQD8gDVcrBgDHkYAKt5HieZ4XsAV43neD7aE+L7CHYADuqJvh+P7kL4+6DcNp7npebKTfej7PsAdh4EQOkZYiEC+IAL2aAFiaHjbaNe3Xreh0zStX6-hhYBAA" target="_blank" rel="noopener noreferrer">实现 Readonly</a></p><p><a href="https://www.typescriptlang.org/play?#code/PQKgUABBCsDMsQLQQMIHsB2BjAhgF0iUWJMICMBPCAQQwBMAnAUyoGkGcBnNAN04GsqACgACZZrAAM-DgDYAnFk4BKCAGImXKmpwMOFQoTXGIARQCuTTngCWmQ1ACSAWwAOAGybOmGPBDwAFkwQAFI4PDgAylgMNq5+AAbUejgUAHRYmLh4CRAAZubYtpgQNhj+Qf4UrsGcFNZeaTRVNf44-FYVwXgA7mgQugDm5t6+nE0AKpVo5niusxCcATPudBBkwTgQGEw9AylUgfil2O7mdJ1l83icJxDueAwQaAwXDA4QAGIvEEwAHjg3J4PglQTdCHhqsEAEpWcwPCAAXlQWXwAB4ANoARgAugAaCAYgBMOIAfBBgMBfn8alg8Ew1nh+htCViCSTCKCEh9yQA1Gy7Z7lADiNjwAAlzGQAFwQAJ4OacaWUm5YAJpABW4xeg2AcFgYBAwDAJtAEAA+pardarRAAJozJ7oC4QcVMZgWm1e80QI0myGtdDYdETAkAVXJyJwGAMppAnu91ogEysfhQXE6iZtvuNNjcLz8AG8IABRACO5hw7gJJZpTDpEAAvvkGGhnBAAOQiANMRBqqueDCDKzAWY2dycDv+qEQXCcTrIjGEWu0vBo8uV9xooPZTH4wlkgkYsmkvHLut09cVqvb1Fr49H3Gn1kns9QFf1tcbm879HY9n7hisAEgALIerLsgSwEQGBpKnueq5Xput7BveHZYh2kGdrAHaAXkVbzgSZBoGgnjRgSHYgbhz4YuhmEQESFE4QS+ETkwREkWRGAUVRr5gDiJpxgmWY+p85gMIE7oQJE9KuLcIm2n6oCEOSkQBLowQUI6iykWOmBKnKCpycqwCquqWppDqerwMA0acD07oqRA-KCtwZzFBgBnyoqJlmZq2oMLq+rAG5emeU5ACyLzBCg6nuIOw5eUZSoqpwar+ZZgWGsaYBAA" target="_blank" rel="noopener noreferrer">Concat</a></p><p><a href="https://www.typescriptlang.org/play#code/PQKgUABBCMAsEFoKBpvQAHKCo5QwoqAJfSiEGF4BGAnhAIIB2ALgBYD2V5AYgK4QAUAAgIa0AzNgEoIAYkAB3oFVlcbwBOc3qTx4xaiIAyMwHduKqAD4IgRldA7DGAZa0BXgYAqlQN-+gRejAMP+Aia0Bz8RAAKAJQiBOU0Db8XcAKWMB5xMAgBl0IQDztQAbnDEAsBMAKVwADFgBLOQBnGgAeABU9RPtAYO1AUuNAdeUMQAdTQBG-RJzEwDc9QBX4wD21QsAQtzQsbDbAbx9AaPUwqDxAaPlAIM1wxMmadLwaUgAHAFMIeTloCABeCABtAHJeXYAaCF3iI5OAY12AXVmF5dWAJk2dgGZjx+PoW6GoOaWIHRFrwACbrLapDLZVbQAzAYAQRYADyWFxoixBEBoDAgxGW+12dwBQNBzwhaUyWSecIRyNR6Mx2Nxy1eeEmiXCBkAFOoQADiKXobGIEEAUHKAU-NANDugCx-ug0GjzdIALnh0wudAAdAArdLqhhyADmwDgwAAXnQEABhAByYBAwDADtAEAA+q63e63RBAAbybUAx3KAQA8XR7g86IHaHf9lpDKTlEUj0VQQekVsxttcDFt+MpHSAgyH3RBANK2gFXo+LDPP511h+0pAC28z1NAgAG8IABRACObF4ABtjm2UYs0RAAL4QARyBi1k7cSMINW9nuLKj6xbpYBsGgpHvpQlgSMQC68dJrl7bPAD+lZTvdntZaPZbbvCCfGDp46vPR6Q4Xwdo69dr294Uo+nCiBsBjQI8z6trwioQJkcgpCuo7vlw4GQdBX4-lAl5DtkN5AQ+WRpt+EBUIsABuixyNhv5XoRd7EdsbCJosAjIRiaGsSC7GcSCX5gLcDpgE6lYFoA0HKoIAptYVpW1aieA+gQIAYEqANVyPqAMeRgAq3jKcoKsqwCqhq2q6gaRqwMA-DpAA7jRprmtaeAGJKOl6fKSoqukapajqeqGsa6QMD2m4pEwMzKYAL2aAFia2juQZXk+aZ-kOZaNrhmAQA" target="_blank" rel="noopener noreferrer">第一个元素</a></p>',90)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
